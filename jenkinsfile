pipeline{
    agent any
    
    triggers{
        pollSCM('* * * * *')
    }

    tools{
        maven 'maven'
        jdk 'java11'
    }

    stages{
       
        stage('maven-package'){
            steps{
                script{
                    last_started=env.STAGE_NAME
                }
                sh 'mvn -f app/pom.xml package'
            }
        }
        
        
      /*  stage('sonar-analysis'){
            steps{
                script{
                    last_started=env.STAGE_NAME
                }
                withSonarQubeEnv('sonarqube1'){
                    sh 'mvn sonar:sonar'
                }
            }
        }
        stage("quality-gate") {
            steps {
                script{
                    last_started=env.STAGE_NAME
                }
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
          }
        stage("collect-artifacts") {
            steps {
                script{
                    last_started=env.STAGE_NAME
                }
              archiveArtifacts artifacts: 'target/*.jar', followSymlinks: false
            }
          }
        stage ('deploy to artifactory'){
            steps{
                script{
                    last_started=env.STAGE_NAME
                }
                rtUpload(
                    serverId: 'artifactoryserver',
                    spec: '''{
                        "files":[
                            {
                              "pattern": "target/*.jar",
                                "target": "art-doc-dev-local2"
                             }
                        ]
                    }''',
                )
            }
        } 
        stage ('download to artifacts folder'){
            steps{
                script{
                    last_started=env.STAGE_NAME
                }
                rtDownload(
                    serverId: 'artifactoryserver',
                    spec: '''{
                        "files":[
                            {
                              "pattern": "art-doc-dev-local2/",
                                 "target": "artifacts/"
                             }
                        ]
                    }''',
                )
            }
        }
    
*/
        
        stage('Docker build'){
            steps{
               
                    sh 'docker image prune -a --force'
                    sh 'docker-compose build'
                
                
            }
        }
        stage('Pushing images to docker hub'){
            steps{
                

                withCredentials([string(credentialsId: 'docker-pwd', variable: 'dockerHubPWD')]) {
                            // some block
                   sh "docker login -u choprachirag002 -p ${dockerHubPWD}"

                }
                sh "docker tag todo_app choprachirag002/todo-app"
                sh "docker push choprachirag002/todo-app"

            }
        }
        stage('deploying it to kubernetes'){
            steps{
                /*sh 'chmod +x change-tag.sh'
                sh """./change-tag.sh v${env.BUILD_ID}"""
                sh 'cat k8s/api-deployment.yaml'*/
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-azure', namespace: '', serverUrl: 'https://immune-locust-k8s-11072721.hcp.westus2.azmk8s.io:443') {
                                // some block
                    sh 'kubectl apply -f k8s/database-deployment.yaml'
                    
                }
                sleep(120)
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-azure', namespace: '', serverUrl: 'https://immune-locust-k8s-11072721.hcp.westus2.azmk8s.io:443') {
                                // some block
                    sh 'kubectl apply -f k8s/api-deployment.yaml'
                    sh 'kubectl get pods'
                    sh 'kubectl get svc'
                    
                }

            }
        }
    

    }
}
